const clickSound = document.getElementById('click-sound');
const successSound = document.getElementById('success-sound');
const punchSound = document.getElementById('punch-sound');
const shredSound = document.getElementById('shred-sound');
const natureSounds = {
    nature: document.getElementById('nature-sound'),
    rain: document.getElementById('rain-sound'),
    waves: document.getElementById('waves-sound'),
    tapping: document.getElementById('tapping-sound'),
    whispering: document.getElementById('whispering-sound'),
    brushing: document.getElementById('brushing-sound')
};
let currentSound = null;

function playSound(sound, volume = 1.0) {
    sound.currentTime = 0;
    sound.volume = volume;
    sound.play().catch(err => console.error('Sound play error:', err));
}

function openPopup(tool) {
    document.querySelectorAll('.popup').forEach(p => p.style.display = 'none');
    const popup = document.getElementById(`${tool}-popup`);
    if (popup) {
        popup.style.display = 'flex';
        playSound(clickSound, 0.3);
        gtag('event', 'Tool Opened', { 'event_category': 'Tool', 'event_label': tool });
        if (tool === 'breathing') startBreathing();
        if (tool === 'soundscape') startSoundscape();
        if (tool === 'punching') startPunching();
        if (tool === 'stretch') startStretch();
        if (tool === 'doodle') startDoodle();
        if (tool === 'color') startColor();
        if (tool === 'sudoku') startSudoku();
        if (tool === 'asmr') startASMR();
    }
}

function closePopup(tool) {
    const popup = document.getElementById(`${tool}-popup`);
    if (popup) {
        popup.style.display = 'none';
        clearInterval(window[`${tool}Interval`]);
        if (currentSound) {
            currentSound.pause();
            currentSound.currentTime = 0;
        }
        if (tool === 'punching') document.getElementById('punching-bag').textContent = '0';
        if (tool === 'doodle') clearCanvas();
        if (tool === 'worry') document.getElementById('paper-strips-container').innerHTML = '';
    }
}

function updateProgress(progressId, totalTime, timeLeft) {
    const progressBar = document.getElementById(progressId);
    if (progressBar) {
        const progress = ((totalTime - timeLeft) / totalTime) * 100;
        progressBar.style.width = `${progress}%`;
    }
}

function selectMood(mood) {
    const tasks = {
        tired: ['breathing', 'stretch', 'soundscape'],
        stressed: ['breathing', 'punching', 'worry'],
        bored: ['doodle', 'sudoku', 'color'],
        excited: ['doodle', 'stretch', 'color'],
        sad: ['gratitude', 'breathing', 'soundscape'],
        angry: ['punching', 'worry', 'breathing'],
        happy: ['gratitude', 'doodle', 'stretch'],
        confused: ['sudoku', 'color', 'breathing']
    };
    const task = tasks[mood][Math.floor(Math.random() * tasks[mood].length)];
    document.getElementById('result').innerHTML = `Try this: <a href="#" onclick="openPopup('${task}')">${task.charAt(0).toUpperCase() + task.slice(1)}</a>`;
    playSound(clickSound, 0.3);
}

function startBreathing() {
    let time = 60;
    let stepTime = 0;
    const steps = ['Inhale', 'Hold', 'Exhale', 'Hold'];
    let currentStep = 0;
    const stepDurations = [4, 4, 4, 4];
    const circle = document.getElementById('breathing-circle');
    const instruction = document.getElementById('breathing-instruction');
    const timer = document.getElementById('breathing-timer');
    updateProgress('breathing-progress', 60, 0);
    window.breathingInterval = setInterval(() => {
        time--;
        stepTime++;
        if (stepTime >= stepDurations[currentStep]) {
            stepTime = 0;
            currentStep = (currentStep + 1) % steps.length;
            instruction.textContent = `${steps[currentStep]}...`;
            circle.style.animation = 'none';
            void circle.offsetWidth;
            circle.style.animation = currentStep === 0 ? 'expand 4s linear' : currentStep === 2 ? 'contract 4s linear' : 'none';
        }
        timer.textContent = `Time remaining: ${time}s`;
        updateProgress('breathing-progress', 60, time);
        if (time <= 0) {
            clearInterval(window.breathingInterval);
            playSound(successSound, 0.4);
            setTimeout(() => closePopup('breathing'), 1500);
        }
    }, 1000);
}

function startSoundscape() {
    let time = 90;
    const timerElement = document.getElementById('soundscape-timer');
    const selectElement = document.getElementById('soundscape-select');
    const playButton = document.getElementById('play-btn');
    const volumeSlider = document.getElementById('volume-slider');
    updateProgress('soundscape-progress', 90, 0);
    playButton.innerHTML = '<i class="fas fa-play"></i>';
    selectElement.onchange = function() {
        if (currentSound) {
            currentSound.pause();
            currentSound.currentTime = 0;
            playButton.innerHTML = '<i class="fas fa-play"></i>';
        }
    };
    playButton.onclick = function() {
        const soundType = selectElement.value;
        if (currentSound && currentSound !== natureSounds[soundType]) {
            currentSound.pause();
            currentSound.currentTime = 0;
        }
        currentSound = natureSounds[soundType];
        if (currentSound.paused) {
            currentSound.play().catch(err => console.error('Sound play error:', err));
            currentSound.volume = volumeSlider.value;
            playButton.innerHTML = '<i class="fas fa-pause"></i>';
        } else {
            currentSound.pause();
            currentSound.currentTime = 0;
            playButton.innerHTML = '<i class="fas fa-play"></i>';
        }
    };
    volumeSlider.oninput = function() {
        if (currentSound) currentSound.volume = this.value;
    };
    window.soundscapeInterval = setInterval(() => {
        time--;
        timerElement.textContent = `Time remaining: ${time}s`;
        updateProgress('soundscape-progress', 90, time);
        if (time <= 0) {
            clearInterval(window.soundscapeInterval);
            if (currentSound) currentSound.pause();
            playSound(successSound, 0.4);
            setTimeout(() => closePopup('soundscape'), 1500);
        }
    }, 1000);
}

function startPunching() {
    let time = 30;
    let punchCount = 0;
    const bag = document.getElementById('punching-bag');
    const timer = document.getElementById('punching-timer');
    updateProgress('punching-progress', 30, 0);
    bag.textContent = punchCount;
    bag.onclick = () => {
        punchCount++;
        bag.textContent = punchCount;
        playSound(punchSound, 0.5);
        bag.classList.add('punch');
        setTimeout(() => bag.classList.remove('punch'), 100);
    };
    window.punchingInterval = setInterval(() => {
        time--;
        timer.textContent = `Time remaining: ${time}s`;
        updateProgress('punching-progress', 30, time);
        if (time <= 0) {
            clearInterval(window.punchingInterval);
            playSound(successSound, 0.4);
            setTimeout(() => closePopup('punching'), 1500);
        }
    }, 1000);
}

function startStretch() {
    let time = 30;
    const stretches = [
        'Reach up high and stretch your arms towards the sky.',
        'Bend to the side, stretching your torso gently.',
        'Touch your toes, feeling the stretch in your hamstrings.',
        'Rotate your shoulders backward in a circular motion.',
        'Extend one arm across your body, holding it with the other.'
    ];
    const prompt = document.getElementById('stretch-prompt');
    const timer = document.getElementById('stretch-timer');
    prompt.textContent = stretches[Math.floor(Math.random() * stretches.length)];
    updateProgress('stretch-progress', 30, 0);
    window.stretchInterval = setInterval(() => {
        time--;
        timer.textContent = `Time remaining: ${time}s`;
        updateProgress('stretch-progress', 30, time);
        if (time <= 0) {
            clearInterval(window.stretchInterval);
            playSound(successSound, 0.4);
            setTimeout(() => closePopup('stretch'), 1500);
        }
    }, 1000);
}

function startDoodle() {
    let time = 90;
    const canvas = document.getElementById('doodle-canvas');
    const ctx = canvas.getContext('2d');
    const colorPicker = document.getElementById('color-picker');
    const brushSize = document.getElementById('brush-size');
    const timer = document.getElementById('doodle-timer');
    let isDrawing = false;
    ctx.lineCap = 'round';
    updateProgress('doodle-progress', 90, 0);
    canvas.onmousedown = () => isDrawing = true;
    canvas.onmouseup = () => isDrawing = false;
    canvas.onmouseout = () => isDrawing = false;
    canvas.onmousemove = (e) => {
        if (!isDrawing) return;
        const rect = canvas.getBoundingClientRect();
        ctx.strokeStyle = colorPicker.value;
        ctx.lineWidth = brushSize.value;
        ctx.lineTo(e.clientX - rect.left, e.clientY - rect.top);
        ctx.stroke();
        ctx.beginPath();
        ctx.moveTo(e.clientX - rect.left, e.clientY - rect.top);
    };
    window.doodleInterval = setInterval(() => {
        time--;
        timer.textContent = `Time remaining: ${time}s`;
        updateProgress('doodle-progress', 90, time);
        if (time <= 0) {
            clearInterval(window.doodleInterval);
            playSound(successSound, 0.4);
            setTimeout(() => closePopup('doodle'), 1500);
        }
    }, 1000);
}

function saveDoodle() {
    const canvas = document.getElementById('doodle-canvas');
    const link = document.createElement('a');
    link.download = 'doodle.png';
    link.href = canvas.toDataURL();
    link.click();
}

function clearCanvas() {
    const canvas = document.getElementById('doodle-canvas');
    const ctx = canvas.getContext('2d');
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    ctx.beginPath();
}

function saveGratitude() {
    const text = document.getElementById('gratitude-text').value;
    if (text.trim()) {
        const blob = new Blob([text], { type: 'text/plain' });
        const link = document.createElement('a');
        link.download = 'gratitude.txt';
        link.href = URL.createObjectURL(blob);
        link.click();
        document.getElementById('gratitude-text').value = '';
        playSound(successSound, 0.4);
        setTimeout(() => closePopup('gratitude'), 1500);
    } else {
        alert('Please write something you are grateful for!');
    }
}

function shredWorry() {
    const text = document.getElementById('worry-text').value;
    const container = document.getElementById('paper-strips-container');
    if (text.trim()) {
        container.innerHTML = '';
        for (let i = 0; i < 10; i++) {
            const strip = document.createElement('div');
            strip.className = 'paper-strip';
            strip.style.left = `${i * 10}%`;
            strip.style.animationDelay = `${i * 0.1}s`;
            container.appendChild(strip);
        }
        playSound(shredSound, 0.5);
        document.getElementById('worry-text').value = '';
        setTimeout(() => {
            container.innerHTML = '';
            playSound(successSound, 0.4);
            setTimeout(() => closePopup('worry'), 1500);
        }, 2000);
    } else {
        alert('Please write a worry to shred!');
    }
}

function startColor() {
    let time = 60;
    const colors = ['#e74c3c', '#3498db', '#2ecc71', '#f1c40f', '#9b59b6'];
    const prompts = ['Red', 'Blue', 'Green', 'Yellow', 'Purple'];
    const index = Math.floor(Math.random() * colors.length);
    const square = document.getElementById('color-square');
    const prompt = document.getElementById('color-prompt');
    const timer = document.getElementById('color-timer');
    square.style.backgroundColor = colors[index];
    prompt.textContent = `Focus on ${prompts[index]}...`;
    updateProgress('color-progress', 60, 0);
    window.colorInterval = setInterval(() => {
        time--;
        timer.textContent = `Time remaining: ${time}s`;
        updateProgress('color-progress', 60, time);
        if (time <= 0) {
            clearInterval(window.colorInterval);
            playSound(successSound, 0.4);
            setTimeout(() => closePopup('color'), 1500);
        }
    }, 1000);
}

function startSudoku() {
    const gridElement = document.getElementById('sudoku-grid');
    const difficultySelect = document.getElementById('sudoku-difficulty');
    const sizeSelect = document.getElementById('sudoku-size');
    const puzzles = {
        four: {
            easy: [
                { grid: [['1','2','',''],['','4','1',''],['','4','',''],['','3','1','2']], solution: [['1','2','3','4'],['3','4','1','2'],['2','4','3','1'],['4','3','2','1']] },
                { grid: [['3','','','4'],['','2','1',''],['','3','4',''],['2','','','1']], solution: [['3','1','2','4'],['4','2','1','3'],['1','3','4','2'],['2','4','3','1']] },
                { grid: [['','','2','3'],['4','','','1'],['1','','','2'],['3','4','','']], solution: [['1','3','2','4'],['4','2','3','1'],['2','1','4','3'],['3','4','1','2']] }
            ],
            intermediate: [
                { grid: [['2','','',''],['','1','','3'],['','4','2',''],['','2','','1']], solution: [['2','3','1','4'],['4','1','2','3'],['3','4','2','1'],['1','2','3','4']] },
                { grid: [['','','1','2'],['','3','',''],['','4','3',''],['2','','','4']], solution: [['3','4','1','2'],['1','3','2','4'],['4','2','3','1'],['2','1','4','3']] },
                { grid: [['','1','','3'],['','3',''],['','2','1',''],['','3','2','4']], solution: [['4','1','2','3'],['2','3','4','1'],['3','2','1','4'],['1','4','3','2']] }
            ],
            hard: [
                { grid: [['','','','1'],['','2','3',''],['','4',''],['3','','','2']], solution: [['4','3','2','1'],['1','2','4','3'],['2','1','3','4'],['3','4','1','2']] },
                { grid: [['','1','',''],['','1','2',''],['','2','4',''],['','3','1','2']], solution: [['4','1','3','2'],['3','1','2','4'],['2','4','3','1'],['1','2','4','3']] },
                { grid: [['1','','','3'],['','2','',''],['','4','3',''],['','3','2','']], solution: [['1','3','2','4'],['3','2','4','1'],['2','4','1','3'],['4','1','3','2']] }
            ]
        },
        nine: {
            easy: [
                { grid: [
                    ['5','3','','7','','','','',''],
                    ['6','','','1','9','5','','',''],
                    ['','9','8','','','','','6',''],
                    ['8','','','','6','','','','3'],
                    ['4','','','8','','','3','','1'],
                    ['7','','','','2','','','','6'],
                    ['','6','','','','','2','8',''],
                    ['','','','4','1','9','','','5'],
                    ['','','','8','','','','7','9']
                ], solution: [
                    ['5','3','4','6','7','8','9','1','2'],
                    ['6','7','2','1','9','5','3','4','8'],
                    ['1','9','8','3','4','2','5','6','7'],
                    ['8','5','9','7','6','1','4','2','3'],
                    ['4','2','6','8','5','3','7','9','1'],
                    ['7','1','3','9','2','4','8','5','6'],
                    ['9','6','1','5','3','7','2','8','4'],
                    ['2','8','7','4','1','9','6','3','5'],
                    ['3','4','5','2','8','6','1','7','9']
                ] },
                { grid: [
                    ['','4','5','3','','','','',''],
                    ['7','','','9','','','','',''],
                    ['','2','6','','8','','','',''],
                    ['8','','','','7','6','','',''],
                    ['','6','7','','','8','9','',''],
                    ['9','','','4','2','','','','6'],
                    ['','3','','','9','7','1','',''],
                    ['','8','1','2','','','4','6',''],
                    ['','5','9','','','4','2','8','']
                ], solution: [
                    ['1','4','5','3','6','2','7','8','9'],
                    ['7','9','3','1','4','5','6','2','8'],
                    ['8','2','6','7','9','8','5','4','3'],
                    ['3','5','4','9','7','6','8','1','2'],
                    ['2','6','7','5','1','8','9','3','4'],
                    ['9','1','8','4','2','3','5','7','6'],
                    ['4','3','2','6','9','7','1','5','8'],
                    ['5','8','1','2','3','9','4','6','7'],
                    ['6','7','9','8','5','4','2','3','1']
                ] }
            ],
            intermediate: [
                { grid: [
                    ['','','','7','','','','',''],
                    ['','','8','3','','','','',''],
                    ['9','','','','4','','','',''],
                    ['2','','','','','','','9',''],
                    ['7','','','','6','','','','4'],
                    ['8','','','','','','','3',''],
                    ['5','','','','','6','','',''],
                    ['','','9','2','','','','',''],
                    ['','','5','','','','','','']
                ], solution: [
                    ['4','3','6','7','8','9','5','1','2'],
                    ['1','5','8','3','2','6','9','7','4'],
                    ['9','7','2','1','5','4','6','8','3'],
                    ['2','6','3','5','7','8','1','9','4'],
                    ['7','9','5','4','6','1','3','2','8'],
                    ['8','4','1','9','3','2','7','5','6'],
                    ['5','8','7','6','9','3','4','1','2'],
                    ['3','1','9','2','4','5','8','6','7'],
                    ['6','2','4','8','1','7','5','3','9']
                ] },
                { grid: [
                    ['6','','','','','','','',''],
                    ['','7','','','9','','','',''],
                    ['','','4','5','','8','','',''],
                    ['','','','7','3','','','',''],
                    ['5','','2','','','6','','',''],
                    ['','','','4','8','','','',''],
                    ['','','','1','6','7','','',''],
                    ['','','','9','4','5','2','',''],
                    ['8','3','','','','','1','','']
                ], solution: [
                    ['6','8','5','2','1','4','3','9','7'],
                    ['3','7','1','6','9','8','5','4','2'],
                    ['2','9','4','5','7','3','8','1','6'],
                    ['4','6','9','7','5','2','1','8','3'],
                    ['5','1','8','3','4','6','9','2','7'],
                    ['7','2','3','8','9','1','4','6','5'],
                    ['9','5','2','1','6','7','8','3','4'],
                    ['1','4','6','9','3','5','2','7','8'],
                    ['8','3','7','4','2','9','6','5','1']
                ] }
            ],
            hard: [
                { grid: [
                    ['8','','','','','','','',''],
                    ['','3','6','','','','','',''],
                    ['','7','','','2','','','',''],
                    ['','','5','','','7','','',''],
                    ['','','','1','','5','','',''],
                    ['9','','','4','','','','',''],
                    ['','5','','','8','1','','',''],
                    ['','','','3','6','','','7',''],
                    ['','','4','9','','','','','']
                ], solution: [
                    ['8','1','2','7','5','3','6','4','9'],
                    ['9','4','3','6','8','2','1','7','5'],
                    ['6','7','5','4','9','1','2','8','3'],
                    ['1','5','4','2','3','7','8','9','6'],
                    ['3','6','9','8','4','5','7','2','1'],
                    ['2','8','7','1','9','6','4','5','3'],
                    ['5','2','1','9','7','4','3','6','8'],
                    ['4','3','8','5','2','1','9','6','7'],
                    ['7','9','6','3','4','8','5','1','2']
                ] },
                { grid: [
                    ['3','','','','','','','',''],
                    ['','5','7','','','','','',''],
                    ['','','','6','9','','','',''],
                    ['','','','8','4','5','','',''],
                    ['7','','','2','6','','','',''],
                    ['','','','9','3','','','',''],
                    ['','','','5','7','2','','',''],
                    ['','6','1','','','','','',''],
                    ['8','','','','','','','4','']
                ], solution: [
                    ['3','8','4','7','2','1','5','9','6'],
                    ['6','5','7','3','8','9','4','2','1'],
                    ['9','2','1','6','5','4','8','7','3'],
                    ['2','9','6','8','4','5','3','1','7'],
                    ['7','1','3','2','6','9','8','5','4'],
                    ['5','4','8','9','3','7','2','6','1'],
                    ['4','3','9','5','7','2','1','8','6'],
                    ['1','6','2','4','9','8','7','3','5'],
                    ['8','7','5','1','3','6','9','4','2']
                ] }
            ]
        }
    };

    function isValidGrid(grid, size) {
        const n = size === 'four' ? 4 : 9;
        const subgridSize = size === 'four' ? 2 : 3;
        for (let row = 0; row < n; row++) {
            let rowSet = new Set();
            for (let col = 0; col < n; col++) {
                if (grid[row][col] && rowSet.has(grid[row][col])) return false;
                if (grid[row][col]) rowSet.add(grid[row][col]);
            }
        }
        for (let col = 0; col < n; col++) {
            let colSet = new Set();
            for (let row = 0; row < n; row++) {
                if (grid[row][col] && colSet.has(grid[row][col])) return false;
                if (grid[row][col]) colSet.add(grid[row][col]);
            }
        }
        for (let subgridRow = 0; subgridRow < n; subgridRow += subgridSize) {
            for (let subgridCol = 0; subgridCol < n; subgridCol += subgridSize) {
                let subgridSet = new Set();
                for (let r = 0; r < subgridSize; r++) {
                    for (let c = 0; c < subgridSize; c++) {
                        let value = grid[subgridRow + r][subgridCol + c];
                        if (value && subgridSet.has(value)) return false;
                        if (value) subgridSet.add(value);
                    }
                }
            }
        }
        return true;
    }

    function checkSolution(grid, solution, size) {
        const n = size === 'four' ? 4 : 9;
        for (let row = 0; row < n; row++) {
            for (let col = 0; col < n; col++) {
                if (grid[row][col] && grid[row][col] !== solution[row][col]) return false;
                if (!grid[row][col] && solution[row][col]) return false;
            }
        }
        return isValidGrid(grid, size);
    }

    function loadPuzzle() {
        const size = sizeSelect.value;
        const difficulty = difficultySelect.value;
        const puzzleList = puzzles[size][difficulty];
        const puzzle = puzzleList[Math.floor(Math.random() * puzzleList.length)];
        const n = size === 'four' ? 4 : 9;
        gridElement.className = `sudoku-grid ${size}`;
        gridElement.innerHTML = '';
        for (let row = 0; row < n; row++) {
            for (let col = 0; col < n; col++) {
                const cell = document.createElement('input');
                cell.type = 'text';
                cell.className = `sudoku-cell ${size}`;
                cell.maxLength = 1;
                cell.value = puzzle.grid[row][col] || '';
                if (puzzle.grid[row][col]) cell.disabled = true;
                cell.addEventListener('input', () => {
                    if (size === 'four' && cell.value && !['1','2','3','4'].includes(cell.value)) {
                        cell.value = '';
                    } else if (size === 'nine' && cell.value && !['1','2','3','4','5','6','7','8','9'].includes(cell.value)) {
                        cell.value = '';
                    }
                });
                gridElement.appendChild(cell);
            }
        }
        document.getElementById('sudoku-finish').onclick = () => {
            const currentGrid = [];
            const cells = gridElement.querySelectorAll('.sudoku-cell');
            for (let row = 0; row < n; row++) {
                currentGrid[row] = [];
                for (let col = 0; col < n; col++) {
                    currentGrid[row][col] = cells[row * n + col].value || '';
                }
            }
            if (checkSolution(currentGrid, puzzle.solution, size)) {
                playSound(successSound, 0.4);
                alert('Congratulations! You solved the puzzle!');
                setTimeout(() => closePopup('sudoku'), 1500);
            } else {
                alert('The puzzle is not correct. Keep trying!');
            }
        };
    }

    sizeSelect.onchange = loadPuzzle;
    difficultySelect.onchange = loadPuzzle;
    loadPuzzle();
}

function startASMR() {
    let time = 90;
    const timerElement = document.getElementById('asmr-timer');
    const selectElement = document.getElementById('asmr-select');
    const playButton = document.getElementById('asmr-play-btn');
    const volumeSlider = document.getElementById('asmr-volume-slider');
    updateProgress('asmr-progress', 90, 0);
    playButton.innerHTML = '<i class="fas fa-play"></i>';
    selectElement.onchange = function() {
        if (currentSound) {
            currentSound.pause();
            currentSound.currentTime = 0;
            playButton.innerHTML = '<i class="fas fa-play"></i>';
        }
    };
    playButton.onclick = function() {
        const soundType = selectElement.value;
        if (currentSound && currentSound !== natureSounds[soundType]) {
            currentSound.pause();
            currentSound.currentTime = 0;
        }
        currentSound = natureSounds[soundType];
        if (currentSound.paused) {
            currentSound.play().catch(err => console.error('ASMR play error:', err));
            currentSound.volume = volumeSlider.value;
            playButton.innerHTML = '<i class="fas fa-pause"></i>';
        } else {
            currentSound.pause();
            currentSound.currentTime = 0;
            playButton.innerHTML = '<i class="fas fa-play"></i>';
        }
    };
    volumeSlider.oninput = function() {
        if (currentSound) currentSound.volume = this.value;
    };
    window.asmrInterval = setInterval(() => {
        time--;
        timerElement.textContent = `Time remaining: ${time}s`;
        updateProgress('asmr-progress', 90, time);
        if (time <= 0) {
            clearInterval(window.asmrInterval);
            if (currentSound) currentSound.pause();
            playSound(successSound, 0.4);
            setTimeout(() => closePopup('asmr'), 1500);
        }
    }, 1000);
}
